{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\"; // Register User\n\nexport var registerCustomer = function registerCustomer(userData, history) {\n  return function (dispatch) {\n    axios.post(\"/api/customers/register-customer\", userData).then(function (res) {\n      return history.push(\"/\");\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; // Login - get user token\n\nexport var loginCustomer = function loginCustomer(userData) {\n  return function (dispatch) {\n    axios.post(\"/api/customers/login\", userData).then(function (res) {\n      // Save to localStorage\n      // Set token to localStorage\n      var token = res.data.token;\n      localStorage.setItem(\"jwtTokenTeams\", JSON.stringify(token)); // Set token to Auth header\n\n      setAuthToken(token); // Decode token to get user data\n\n      var decoded = jwt_decode(token); // Set current user\n\n      dispatch(setCurrentUser(decoded));\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; // Set logged in user\n\nexport var setCurrentUser = function setCurrentUser(decoded) {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // User loading\n\nexport var setUserLoading = function setUserLoading() {\n  return {\n    type: USER_LOADING\n  };\n}; // Log user out\n\nexport var logoutUser = function logoutUser(history) {\n  return function (dispatch) {\n    // Remove token from local storage\n    localStorage.removeItem(\"jwtTokenTeams\"); // Remove auth header for future requests\n\n    setAuthToken(false); // Set current user to empty object {} which will set isAuthenticated to false\n\n    dispatch(setCurrentUser({}));\n    history.push(\"/dashboard\");\n  };\n};","map":{"version":3,"sources":["c:/Users/micah/Documents/Main/Projects/restaurant-application/restaurant_online_order_application/client/src/actions/authActions-Customer.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","registerCustomer","userData","history","dispatch","post","then","res","push","catch","err","type","payload","response","data","loginCustomer","token","localStorage","setItem","JSON","stringify","decoded","setCurrentUser","setUserLoading","logoutUser","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,SAASC,UAAT,EAAqBC,gBAArB,EAAuCC,YAAvC,QAA2D,SAA3D,C,CAEA;;AACA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,QAAD,EAAWC,OAAX;AAAA,SAAuB,UAAAC,QAAQ,EAAI;AACjET,IAAAA,KAAK,CACFU,IADH,CACQ,kCADR,EAC4CH,QAD5C,EAEGI,IAFH,CAEQ,UAAAC,GAAG;AAAA,aAAIJ,OAAO,CAACK,IAAR,CAAa,GAAb,CAAJ;AAAA,KAFX,EAGGC,KAHH,CAGS,UAAAC,GAAG;AAAA,aACRN,QAAQ,CAAC;AACPO,QAAAA,IAAI,EAAEb,UADC;AAEPc,QAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,OAAD,CADA;AAAA,KAHZ;AASD,GAV+B;AAAA,CAAzB,C,CAYP;;AACA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAb,QAAQ;AAAA,SAAI,UAAAE,QAAQ,EAAI;AACnDT,IAAAA,KAAK,CACFU,IADH,CACQ,sBADR,EACgCH,QADhC,EAEGI,IAFH,CAEQ,UAAAC,GAAG,EAAI;AACX;AAEA;AAHW,UAIHS,KAJG,GAIOT,GAAG,CAACO,IAJX,CAIHE,KAJG;AAKXC,MAAAA,YAAY,CAACC,OAAb,CAAqB,eAArB,EAAsCC,IAAI,CAACC,SAAL,CAAeJ,KAAf,CAAtC,EALW,CAMX;;AACApB,MAAAA,YAAY,CAACoB,KAAD,CAAZ,CAPW,CAQX;;AACA,UAAMK,OAAO,GAAGxB,UAAU,CAACmB,KAAD,CAA1B,CATW,CAUX;;AACAZ,MAAAA,QAAQ,CAACkB,cAAc,CAACD,OAAD,CAAf,CAAR;AACD,KAdH,EAeGZ,KAfH,CAeS,UAAAC,GAAG;AAAA,aACRN,QAAQ,CAAC;AACPO,QAAAA,IAAI,EAAEb,UADC;AAEPc,QAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,OAAD,CADA;AAAA,KAfZ;AAqBD,GAtBoC;AAAA,CAA9B,C,CAwBP;;AACA,OAAO,IAAMQ,cAAc,GAAG,SAAjBA,cAAiB,CAAAD,OAAO,EAAI;AACvC,SAAO;AACLV,IAAAA,IAAI,EAAEZ,gBADD;AAELa,IAAAA,OAAO,EAAES;AAFJ,GAAP;AAID,CALM,C,CAOP;;AACA,OAAO,IAAME,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAClC,SAAO;AACLZ,IAAAA,IAAI,EAAEX;AADD,GAAP;AAGD,CAJM,C,CAMP;;AACA,OAAO,IAAMwB,UAAU,GAAG,SAAbA,UAAa,CAAArB,OAAO;AAAA,SAAI,UAAAC,QAAQ,EAAI;AAC/C;AACAa,IAAAA,YAAY,CAACQ,UAAb,CAAwB,eAAxB,EAF+C,CAG/C;;AACA7B,IAAAA,YAAY,CAAC,KAAD,CAAZ,CAJ+C,CAK/C;;AACAQ,IAAAA,QAAQ,CAACkB,cAAc,CAAC,EAAD,CAAf,CAAR;AAEAnB,IAAAA,OAAO,CAACK,IAAR,CAAa,YAAb;AACD,GATgC;AAAA,CAA1B","sourcesContent":["import axios from \"axios\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\";\r\n\r\n// Register User\r\nexport const registerCustomer = (userData, history) => dispatch => {\r\n  axios\r\n    .post(\"/api/customers/register-customer\", userData)\r\n    .then(res => history.push(\"/\"))\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n};\r\n\r\n// Login - get user token\r\nexport const loginCustomer = userData => dispatch => {\r\n  axios\r\n    .post(\"/api/customers/login\", userData)\r\n    .then(res => {\r\n      // Save to localStorage\r\n\r\n      // Set token to localStorage\r\n      const { token } = res.data;\r\n      localStorage.setItem(\"jwtTokenTeams\", JSON.stringify(token));\r\n      // Set token to Auth header\r\n      setAuthToken(token);\r\n      // Decode token to get user data\r\n      const decoded = jwt_decode(token);\r\n      // Set current user\r\n      dispatch(setCurrentUser(decoded));\r\n    })\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n};\r\n\r\n// Set logged in user\r\nexport const setCurrentUser = decoded => {\r\n  return {\r\n    type: SET_CURRENT_USER,\r\n    payload: decoded\r\n  };\r\n};\r\n\r\n// User loading\r\nexport const setUserLoading = () => {\r\n  return {\r\n    type: USER_LOADING\r\n  };\r\n};\r\n\r\n// Log user out\r\nexport const logoutUser = history => dispatch => {\r\n  // Remove token from local storage\r\n  localStorage.removeItem(\"jwtTokenTeams\");\r\n  // Remove auth header for future requests\r\n  setAuthToken(false);\r\n  // Set current user to empty object {} which will set isAuthenticated to false\r\n  dispatch(setCurrentUser({}));\r\n\r\n  history.push(\"/dashboard\");\r\n};\r\n"]},"metadata":{},"sourceType":"module"}